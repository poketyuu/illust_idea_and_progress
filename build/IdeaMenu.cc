//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "IdeaMenu.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string IdeaMenu::genText(const DrTemplateData& IdeaMenu_view_data)
{
	drogon::OStringStream IdeaMenu_tmp_stream;
	std::string layoutName{""};
	IdeaMenu_tmp_stream << "<!DOCTYPE HTML>\n";
 
//auto InDojinshi = IdeaMenu_view_data.get<bool>("InDojinshi");
{
    auto templ=DrTemplateBase::newTemplate("temphead");
    if(templ){
      IdeaMenu_tmp_stream<< templ->genText(IdeaMenu_view_data);
    }
}
IdeaMenu_tmp_stream<<"\n";
	IdeaMenu_tmp_stream << "<body>\n";
{
    auto templ=DrTemplateBase::newTemplate("tempbody");
    if(templ){
      IdeaMenu_tmp_stream<< templ->genText(IdeaMenu_view_data);
    }
}
IdeaMenu_tmp_stream<<"\n";
	IdeaMenu_tmp_stream << "<main>\n";
	IdeaMenu_tmp_stream << "<div class=\"container px-2 py-5\">\n";
	IdeaMenu_tmp_stream << "<form action=\"EditIdea\" method=\"POST\">\n";
	IdeaMenu_tmp_stream << "<div class=\"mb-3\">\n";
	IdeaMenu_tmp_stream << "<label class=\"form-label\">タイトル:</label>\n";
	IdeaMenu_tmp_stream << "<input type=\"text\" name=\"idea_chara\" value=\"";
{
    auto & val=IdeaMenu_view_data["title"];
    if(val.type()==typeid(const char *)){
        IdeaMenu_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        IdeaMenu_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	IdeaMenu_tmp_stream << "\" required>\n";
	IdeaMenu_tmp_stream << "</div>\n";
	IdeaMenu_tmp_stream << "<div class=\"mb-3\">\n";
	IdeaMenu_tmp_stream << "<label class=\"form-label\">内容:</label>\n";
	IdeaMenu_tmp_stream << "<textarea name=\"idea_explain\" rows=\"7\" cols=\"20\" style=\"vertical-align:top;\">";
{
    auto & val=IdeaMenu_view_data["explain"];
    if(val.type()==typeid(const char *)){
        IdeaMenu_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        IdeaMenu_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	IdeaMenu_tmp_stream << "</textarea>\n";
	IdeaMenu_tmp_stream << "</div>\n";
	IdeaMenu_tmp_stream << "<div class=\"mb-3\">\n";
	IdeaMenu_tmp_stream << "<label class=\"form-label\">締切:</label>\n";
	IdeaMenu_tmp_stream << "<input type=\"date\" name=\"idea_deadline\" pattern=\"\\d{4}-\\d{2}-\\d{2}\" value=\"";
{
    auto & val=IdeaMenu_view_data["deadline"];
    if(val.type()==typeid(const char *)){
        IdeaMenu_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        IdeaMenu_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	IdeaMenu_tmp_stream << "\" min = \"";
{
    auto & val=IdeaMenu_view_data["today"];
    if(val.type()==typeid(const char *)){
        IdeaMenu_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        IdeaMenu_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	IdeaMenu_tmp_stream << "\">\n";
	IdeaMenu_tmp_stream << "<button class=\"btn-primary\" type=\"submit\">変更</button>\n";
	IdeaMenu_tmp_stream << "</form>\n";
	IdeaMenu_tmp_stream << "<div class=\"mb-3\">\n";
	IdeaMenu_tmp_stream << "<a role=\"button\" class=\"btn btn-danger\" href=\"DeleteIdea\">削除</a>\n";
	IdeaMenu_tmp_stream << "</div>\n";
	IdeaMenu_tmp_stream << "</div>\n";
	IdeaMenu_tmp_stream << "</main>\n";
	IdeaMenu_tmp_stream << "<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\"></script>\n";
	IdeaMenu_tmp_stream << "</body>\n";
	IdeaMenu_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(IdeaMenu_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = IdeaMenu_view_data;
auto str = std::move(IdeaMenu_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
